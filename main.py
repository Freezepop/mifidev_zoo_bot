import logging
import smtplib
from email.message import EmailMessage
from db import save_result, save_feedback, get_result, init_db
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, InlineQueryHandler

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = ""

STAFF_EMAIL = ""
SENDER_EMAIL = ""
SENDER_PASSWORD = ""

questions = [
    {
        "question": "–ì–¥–µ —Ç—ã –º–µ—á—Ç–∞–µ—à—å –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        "answers": [
            ("üèî –í –ª–µ—Å—É", "los"),
            ("üõè –ü–æ–¥ –ø–ª–µ–¥–æ–º", "surikat"),
            ("üå¥ –í –¥–∂—É–Ω–≥–ª—è—Ö", "serval"),
            ("üåç –í –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏", "kapibara")
        ]
    },
    {
        "question": "–ß—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –Ω–∞ —É–∂–∏–Ω?",
        "answers": [
            ("ü•ó –û–≤–æ—â–∏", "kapibara"),
            ("ü•© –ú—è—Å–æ", "serval"),
            ("üçï –ü–∏—Ü—Ü–∞", "surikat"),
            ("üçå –§—Ä—É–∫—Ç—ã", "lemur")
        ]
    },
    {
        "question": "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å—É–ø–µ—Ä—Å–∏–ª–∞?",
        "answers": [
            ("üí° –•–∏—Ç—Ä–æ—Å—Ç—å", "mangobey"),
            ("üòå –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "los"),
            ("‚ö° –ë—ã—Å—Ç—Ä–æ—Ç–∞", "serval"),
            ("üëÄ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "surikat")
        ]
    }
]

animals = {
    "los": {
        "title": "ü¶å –¢—ã ‚Äî –õ–æ—Å—å!",
        "desc": "–ú—É–¥—Ä—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π. –ù–∞—à –õ–∞–≤—Ä–µ–Ω—Ç–∏–π –ª—é–±–∏—Ç —è–±–ª–æ–∫–∏ –∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ.",
        "image": "photo_animals/los.jpg"
    },
    "surikat": {
        "title": "ü¶¥ –¢—ã ‚Äî –°—É—Ä–∏–∫–∞—Ç!",
        "desc": "–¢—ã –ª—é–±–æ–ø—ã—Ç–Ω—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫. –ö–∞–∫ –°–∏–º–∞ –∏–∑ –∑–æ–æ–ø–∞—Ä–∫–∞.",
        "image": "photo_animals/surikat.jpg"
    },
    "serval": {
        "title": "üêÜ –¢—ã ‚Äî –°–µ—Ä–≤–∞–ª!",
        "desc": "–ò–∑—è—â–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –õ—é–±–∏—à—å –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –æ—Ö–æ—Ç—É –∑–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º–∏.",
        "image": "photo_animals/serval.jpg"
    },
    "kapibara": {
        "title": "üõÅ –¢—ã ‚Äî –ö–∞–ø–∏–±–∞—Ä–∞!",
        "desc": "–°–ø–æ–∫–æ–π–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ. –ù–∞—à –ß–∞–ø–∞ –æ–±–æ–∂–∞–µ—Ç –ª–µ–∂–∞—Ç—å –≤ –≤–∞–Ω–Ω–µ —Å —Ç—Ä–∞–≤–æ–π.",
        "image": "photo_animals/kapibara.jpg"
    },
    "lemur": {
        "title": "üå¥ –¢—ã ‚Äî –õ–µ–º—É—Ä!",
        "desc": "–û–±–æ–∂–∞–µ—à—å —Ñ—Ä—É–∫—Ç—ã, –ø—Ä—ã–∂–∫–∏ –∏ —Ç–∞–Ω—Ü—ã. –û—á–µ–Ω—å –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π –∏ –≤–µ—Å—ë–ª—ã–π.",
        "image": "photo_animals/lemur.jpg"
    },
    "mangobey": {
        "title": "üêí –¢—ã ‚Äî –•–æ—Ö–ª–∞—Ç—ã–π –º–∞–Ω–≥–æ–±–µ–π!",
        "desc": "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∏ —Ö—É–ª–∏–≥–∞–Ω–∏—Å—Ç—ã–π. –õ—é–±–∏—à—å –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è.",
        "image": "photo_animals/mangobey.jpg"
    }
}


user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await init_db()

    user_id = update.effective_user.id

    existing = await get_result(user_id)

    if existing and existing in animals:
        info = animals[existing]

        keyboard = [
            [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫–µ üêæ", url="https://moscowzoo.ru/contacts")],
            [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üîÅ", callback_data="restart")],
            [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨", callback_data="feedback")],
            [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º üì©", callback_data="contact_staff")],
            [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ üì¢", switch_inline_query=f" - –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞!\n–Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{info['title']}\n{info['desc']}\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã! https://t.me/{context.bot.username}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        with open(info["image"], "rb") as photo:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=f"{info['title']}\n\n{info['desc']}",
                reply_markup=reply_markup
            )
        return

    user_data[user_id] = {"current_q": 0, "score": {}}

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üêæ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ?\n\n–ü–æ–µ—Ö–∞–ª–∏!"
    )
    await send_question(update, context)


async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data[user_id]
    q_index = data["current_q"]

    if q_index >= len(questions):
        await show_result(update, context)
        return

    question = questions[q_index]
    buttons = [
        [InlineKeyboardButton(text=ans[0], callback_data=ans[1])] for ans in question["answers"]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    if update.callback_query:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            await update.callback_query.edit_message_text(
                question["question"], reply_markup=reply_markup
            )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=question["question"],
                reply_markup=reply_markup
            )
    else:
        await update.message.reply_text(question["question"], reply_markup=reply_markup)



async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    data = user_data[user_id]

    data["score"][answer] = data["score"].get(answer, 0) + 1
    data["current_q"] += 1

    await send_question(update, context)


async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_data.get(user_id, {}).get("result_shown"):
        await update.callback_query.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω.")
        return

    scores = user_data[user_id]["score"]
    top_animal = max(scores, key=scores.get)
    info = animals[top_animal]

    try:
        await save_result(user_id, top_animal)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î: {e}")

    keyboard = [
        [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫–µ üêæ", url="https://moscowzoo.ru/contacts")],
        [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? üîÅ", callback_data="restart")],
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨", callback_data="feedback")],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º üì©", callback_data="contact_staff")],
        [InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ üì¢", switch_inline_query=f" - –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞!\n–Ø –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{info['title']}\n{info['desc']}\n–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã! https://t.me/{context.bot.username}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    with open(info["image"], "rb") as photo:
        media = InputMediaPhoto(media=photo, caption=f"{info['title']}\n\n{info['desc']}")
        try:
            await update.callback_query.edit_message_media(
                media=media,
                reply_markup=reply_markup
            )
            user_data[user_id]["result_shown"] = True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
            await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")


async def contact_staff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    scores = user_data.get(user_id, {}).get("score")

    if scores:
        top_animal = max(scores, key=scores.get)
    else:
        top_animal = await get_result(user_id)

    if not top_animal or top_animal not in animals:
        await update.callback_query.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    info = animals[top_animal]

    subject = f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram @{username}"
    body = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {info['title']}\n{info['desc']}\n"
    )

    try:
        msg = EmailMessage()
        msg["From"] = SENDER_EMAIL
        msg["To"] = STAFF_EMAIL
        msg["Subject"] = subject
        msg.set_content(body)

        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(SENDER_EMAIL, SENDER_PASSWORD)
            smtp.send_message(msg)

        await update.callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É!", show_alert=True)
        await context.bot.send_message(
            chat_id=user_id,
            text="–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–æ–æ–ø–∞—Ä–∫–∞ üêæ –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º üê¢", show_alert=True)


async def request_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]["awaiting_feedback"] = True

    await context.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")



async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_data.get(user_id, {}).get("awaiting_feedback"):
        try:
            await save_feedback(user_id, text)
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíö")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ üòì")
        user_data[user_id]["awaiting_feedback"] = False


async def inline_share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.inline_query.from_user.id
    top_animal = await get_result(user_id)

    if not top_animal or top_animal not in animals:
        return

    info = animals[top_animal]

    text = (
        f"–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–µ —É –º–µ–Ω—è —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ! {info['title']}\n\n"
        f"{info['desc']}\n\n"
        f"üêæ –£–∑–Ω–∞–π –∏ —Ç—ã —Å–≤–æ—ë –∂–∏–≤–æ—Ç–Ω–æ–µ! –ü–æ–ø—Ä–æ–±—É–π –±–æ—Ç–∞ üëâ https://t.me/{context.bot.username}"
    )

    result = InlineQueryResultArticle(
        id="share_result",
        title="ü¶Å –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
        input_message_content=InputTextMessageContent(text),
        description="–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π!",
    )

    await update.inline_query.answer([result], cache_time=0)


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {"current_q": 0, "score": {}}
    await send_question(update, context)


def main():

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(InlineQueryHandler(inline_share))
    app.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))
    app.add_handler(CallbackQueryHandler(request_feedback, pattern="^feedback$"))
    app.add_handler(CallbackQueryHandler(contact_staff, pattern="^contact_staff$"))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern="^(?!restart$|feedback$|contact_staff$).*"))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
